/*
 * This file is generated by jOOQ.
 */
package ru.hse.spb.keylogger.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.hse.spb.keylogger.db.Indexes;
import ru.hse.spb.keylogger.db.Keys;
import ru.hse.spb.keylogger.db.Public;
import ru.hse.spb.keylogger.db.tables.records.WorklogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Worklog extends TableImpl<WorklogRecord> {

    private static final long serialVersionUID = -1590203199;

    /**
     * The reference instance of <code>public.worklog</code>
     */
    public static final Worklog WORKLOG = new Worklog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorklogRecord> getRecordType() {
        return WorklogRecord.class;
    }

    /**
     * The column <code>public.worklog.id</code>.
     */
    public final TableField<WorklogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('worklog_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<WorklogRecord, Object> CHANGES = createField("changes", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"jsonb\""), this, "");

    /**
     * The column <code>public.worklog.file_name</code>.
     */
    public final TableField<WorklogRecord, String> FILE_NAME = createField("file_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.worklog.project_name</code>.
     */
    public final TableField<WorklogRecord, String> PROJECT_NAME = createField("project_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.worklog.timestamp</code>.
     */
    public final TableField<WorklogRecord, Long> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.worklog.action</code>.
     */
    public final TableField<WorklogRecord, String> ACTION = createField("action", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<WorklogRecord, Object> PARAMS = createField("params", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"jsonb\""), this, "");

    /**
     * The column <code>public.worklog.worker_id</code>.
     */
    public final TableField<WorklogRecord, Long> WORKER_ID = createField("worker_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.worklog</code> table reference
     */
    public Worklog() {
        this(DSL.name("worklog"), null);
    }

    /**
     * Create an aliased <code>public.worklog</code> table reference
     */
    public Worklog(String alias) {
        this(DSL.name(alias), WORKLOG);
    }

    /**
     * Create an aliased <code>public.worklog</code> table reference
     */
    public Worklog(Name alias) {
        this(alias, WORKLOG);
    }

    private Worklog(Name alias, Table<WorklogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Worklog(Name alias, Table<WorklogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Worklog(Table<O> child, ForeignKey<O, WorklogRecord> key) {
        super(child, key, WORKLOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_WORKLOG__WORKER_ID, Indexes.WORKLOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorklogRecord, Long> getIdentity() {
        return Keys.IDENTITY_WORKLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorklogRecord> getPrimaryKey() {
        return Keys.WORKLOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorklogRecord>> getKeys() {
        return Arrays.<UniqueKey<WorklogRecord>>asList(Keys.WORKLOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Worklog as(String alias) {
        return new Worklog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Worklog as(Name alias) {
        return new Worklog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Worklog rename(String name) {
        return new Worklog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Worklog rename(Name name) {
        return new Worklog(name, null);
    }
}
