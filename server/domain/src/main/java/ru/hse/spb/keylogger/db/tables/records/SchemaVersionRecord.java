/*
 * This file is generated by jOOQ.
 */
package ru.hse.spb.keylogger.db.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;

import ru.hse.spb.keylogger.db.tables.SchemaVersion;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaVersionRecord extends UpdatableRecordImpl<SchemaVersionRecord> implements Record10<String, String, String, String, Integer, String, Timestamp, Integer, String, Boolean> {

    private static final long serialVersionUID = 1989353337;

    /**
     * Setter for <code>public.schema_version.version</code>.
     */
    public void setVersion(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.schema_version.version</code>.
     */
    public String getVersion() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.schema_version.description</code>.
     */
    public void setDescription(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.schema_version.description</code>.
     */
    public String getDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.schema_version.type</code>.
     */
    public void setType(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.schema_version.type</code>.
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.schema_version.script</code>.
     */
    public void setScript(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.schema_version.script</code>.
     */
    public String getScript() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.schema_version.checksum</code>.
     */
    public void setChecksum(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.schema_version.checksum</code>.
     */
    public Integer getChecksum() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.schema_version.installed_by</code>.
     */
    public void setInstalledBy(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.schema_version.installed_by</code>.
     */
    public String getInstalledBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.schema_version.installed_on</code>.
     */
    public void setInstalledOn(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.schema_version.installed_on</code>.
     */
    public Timestamp getInstalledOn() {
        return (Timestamp) get(6);
    }

    /**
     * Setter for <code>public.schema_version.execution_time</code>.
     */
    public void setExecutionTime(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.schema_version.execution_time</code>.
     */
    public Integer getExecutionTime() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.schema_version.state</code>.
     */
    public void setState(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.schema_version.state</code>.
     */
    public String getState() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.schema_version.current_version</code>.
     */
    public void setCurrentVersion(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.schema_version.current_version</code>.
     */
    public Boolean getCurrentVersion() {
        return (Boolean) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<String, String, String, String, Integer, String, Timestamp, Integer, String, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<String, String, String, String, Integer, String, Timestamp, Integer, String, Boolean> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return SchemaVersion.SCHEMA_VERSION.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return SchemaVersion.SCHEMA_VERSION.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return SchemaVersion.SCHEMA_VERSION.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return SchemaVersion.SCHEMA_VERSION.SCRIPT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return SchemaVersion.SCHEMA_VERSION.CHECKSUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return SchemaVersion.SCHEMA_VERSION.INSTALLED_BY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field7() {
        return SchemaVersion.SCHEMA_VERSION.INSTALLED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return SchemaVersion.SCHEMA_VERSION.EXECUTION_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return SchemaVersion.SCHEMA_VERSION.STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field10() {
        return SchemaVersion.SCHEMA_VERSION.CURRENT_VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getScript();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getChecksum();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getInstalledBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component7() {
        return getInstalledOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component8() {
        return getExecutionTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component10() {
        return getCurrentVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getScript();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getChecksum();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getInstalledBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value7() {
        return getInstalledOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getExecutionTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value10() {
        return getCurrentVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value1(String value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value2(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value3(String value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value4(String value) {
        setScript(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value5(Integer value) {
        setChecksum(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value6(String value) {
        setInstalledBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value7(Timestamp value) {
        setInstalledOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value8(Integer value) {
        setExecutionTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value9(String value) {
        setState(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord value10(Boolean value) {
        setCurrentVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaVersionRecord values(String value1, String value2, String value3, String value4, Integer value5, String value6, Timestamp value7, Integer value8, String value9, Boolean value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaVersionRecord
     */
    public SchemaVersionRecord() {
        super(SchemaVersion.SCHEMA_VERSION);
    }

    /**
     * Create a detached, initialised SchemaVersionRecord
     */
    public SchemaVersionRecord(String version, String description, String type, String script, Integer checksum, String installedBy, Timestamp installedOn, Integer executionTime, String state, Boolean currentVersion) {
        super(SchemaVersion.SCHEMA_VERSION);

        set(0, version);
        set(1, description);
        set(2, type);
        set(3, script);
        set(4, checksum);
        set(5, installedBy);
        set(6, installedOn);
        set(7, executionTime);
        set(8, state);
        set(9, currentVersion);
    }
}
